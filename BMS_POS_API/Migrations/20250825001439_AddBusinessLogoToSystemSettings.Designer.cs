// <auto-generated />
using System;
using BMS_POS_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BMS_POS_API.Migrations
{
    [DbContext(typeof(BmsPosDbContext))]
    [Migration("20250825001439_AddBusinessLogoToSystemSettings")]
    partial class AddBusinessLogoToSystemSettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BMS_POS_API.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsManager")
                        .HasColumnType("boolean")
                        .HasColumnName("is_manager");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("pin");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("BMS_POS_API.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("barcode");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("brand");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("cost");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("MinStockLevel")
                        .HasColumnType("integer")
                        .HasColumnName("min_stock_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("stock_quantity");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit");

                    b.Property<string>("Variant")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("variant");

                    b.HasKey("Id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("BMS_POS_API.Models.Return", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedByEmployeeId")
                        .HasColumnType("integer");

                    b.Property<bool>("ManagerApprovalRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("OriginalSaleId")
                        .HasColumnType("integer");

                    b.Property<int>("ProcessedByEmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReturnId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalRefundAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByEmployeeId");

                    b.HasIndex("OriginalSaleId");

                    b.HasIndex("ProcessedByEmployeeId");

                    b.ToTable("returns", (string)null);
                });

            modelBuilder.Entity("BMS_POS_API.Models.ReturnItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("numeric");

                    b.Property<int>("OriginalSaleItemId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RestockedToInventory")
                        .HasColumnType("boolean");

                    b.Property<int>("ReturnId")
                        .HasColumnType("integer");

                    b.Property<int>("ReturnQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OriginalSaleItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReturnId");

                    b.ToTable("return_items", (string)null);
                });

            modelBuilder.Entity("BMS_POS_API.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Change")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("DiscountReason")
                        .HasColumnType("text");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("sales", (string)null);
                });

            modelBuilder.Entity("BMS_POS_API.Models.SaleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductBarcode")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("SaleId")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("sale_items", (string)null);
                });

            modelBuilder.Entity("BMS_POS_API.Models.SystemSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowDefectiveItemReturns")
                        .HasColumnType("boolean");

                    b.Property<int>("AutoLogoutMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("BusinessLogoPath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CurrencySymbolBefore")
                        .HasColumnType("boolean");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DecimalSeparator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefaultPaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefaultReceiptEmail")
                        .HasColumnType("text");

                    b.Property<bool>("EmailReceiptEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableReturns")
                        .HasColumnType("boolean");

                    b.Property<double>("FontScaling")
                        .HasColumnType("double precision");

                    b.Property<bool>("IncludeTaxBreakdown")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PrintProductImages")
                        .HasColumnType("boolean");

                    b.Property<bool>("PrintReceiptAutomatically")
                        .HasColumnType("boolean");

                    b.Property<int>("ReceiptCopies")
                        .HasColumnType("integer");

                    b.Property<string>("ReceiptFontSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiptFooterText")
                        .HasColumnType("text");

                    b.Property<string>("ReceiptHeaderText")
                        .HasColumnType("text");

                    b.Property<string>("ReceiptPaperSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiptTemplateLayout")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RequireManagerApprovalForDiscount")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequireManagerApprovalForReturns")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequireReceiptForReturns")
                        .HasColumnType("boolean");

                    b.Property<bool>("RestockReturnedItems")
                        .HasColumnType("boolean");

                    b.Property<decimal>("ReturnManagerApprovalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("ReturnReasons")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReturnTimeLimitDays")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowReceiptBarcode")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowReceiptPreview")
                        .HasColumnType("boolean");

                    b.Property<bool>("SoundEffectsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("StoreLocation")
                        .HasColumnType("text");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThousandsSeparator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("system_settings", (string)null);
                });

            modelBuilder.Entity("BMS_POS_API.Models.TaxSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EnableSecondaryTax")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTax")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTaxExemptions")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryTaxName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("SecondaryTaxRate")
                        .HasColumnType("numeric");

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("tax_settings", (string)null);
                });

            modelBuilder.Entity("BMS_POS_API.Models.Return", b =>
                {
                    b.HasOne("BMS_POS_API.Models.Employee", "ApprovedByEmployee")
                        .WithMany()
                        .HasForeignKey("ApprovedByEmployeeId");

                    b.HasOne("BMS_POS_API.Models.Sale", "OriginalSale")
                        .WithMany()
                        .HasForeignKey("OriginalSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMS_POS_API.Models.Employee", "ProcessedByEmployee")
                        .WithMany()
                        .HasForeignKey("ProcessedByEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedByEmployee");

                    b.Navigation("OriginalSale");

                    b.Navigation("ProcessedByEmployee");
                });

            modelBuilder.Entity("BMS_POS_API.Models.ReturnItem", b =>
                {
                    b.HasOne("BMS_POS_API.Models.SaleItem", "OriginalSaleItem")
                        .WithMany()
                        .HasForeignKey("OriginalSaleItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMS_POS_API.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMS_POS_API.Models.Return", "Return")
                        .WithMany("ReturnItems")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalSaleItem");

                    b.Navigation("Product");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("BMS_POS_API.Models.Sale", b =>
                {
                    b.HasOne("BMS_POS_API.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BMS_POS_API.Models.SaleItem", b =>
                {
                    b.HasOne("BMS_POS_API.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMS_POS_API.Models.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("BMS_POS_API.Models.Return", b =>
                {
                    b.Navigation("ReturnItems");
                });

            modelBuilder.Entity("BMS_POS_API.Models.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });
#pragma warning restore 612, 618
        }
    }
}
